type User
  @model
  @auth(rules: [{ allow: private }, { allow: private, provider: iam }]) {
  userId: ID! @primaryKey
  name: String!
  email: AWSEmail!
  gender: Gender!
  age: Int
  travels: [Travel] @manyToMany(relationName: "TravelUser")
}

type Travel @model @auth(rules: [{ allow: private }]) {
  travelId: ID! @primaryKey(sortKeyFields: ["travelDate"])
  travelDate: AWSDate!
  travelName: String!
  users: [User] @manyToMany(relationName: "TravelUser")
  spots: [Spot] @hasMany(indexName: "byTravel", fields: ["travelId"]) # ここ["travelId", "travelDate"]かも
  ownerId: ID!
  owner: User @hasOne(fields: ["ownerId"])
}

type Spot @model @auth(rules: [{ allow: private }]) {
  spotId: ID! @primaryKey
  location: String!
  departureTime: AWSDateTime!
  arrivalTime: AWSDateTime!
  stayTimeMin: Int!
  travelId: ID! @index(name: "byTravel", sortKeyFields: ["travelDate"])
  travelDate: AWSDate!
  travel: Travel @belongsTo(fields: ["travelId", "travelDate"])
}

enum Gender {
  MAN
  WOMAN
}

input SpotsInput {
  spotName: String!
  spotAddress: String!
}

type RouteDurations {
  spotName: String!
  spotAddress: String!
  duration: String!
  distance: String!
}
type RouteDurationsResponse {
  car: [RouteDurations!]!
  walk: [RouteDurations!]!
}

type Query {
  getRouteDurations(
    currentSpot: SpotsInput!
    nextSpots: [SpotsInput!]!
  ): [RouteDurationsResponse!]!
    @function(name: "matatabiRouteDurations-${env}")
    @auth(rules: [{ allow: private }])
}
